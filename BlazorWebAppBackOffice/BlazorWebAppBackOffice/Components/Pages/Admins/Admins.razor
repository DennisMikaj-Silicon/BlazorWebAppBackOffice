@page "/admins"
@using System.ComponentModel.DataAnnotations
@using BlazorWebAppBackOffice.Data
@using Microsoft.AspNetCore.Identity
@using Microsoft.EntityFrameworkCore
@inject UserManager<ApplicationUser> UserManager
@inject NavigationManager Navigation
@rendermode InteractiveServer
<PageTitle>Admins</PageTitle>

<h1>Admins</h1>

<p>Manage Admins.</p>

@if (admins == null || admins.Count == 0)
{
    <p><em>Loading...</em></p>
}
else
{
    foreach (var admin in admins)
    {
        <div class="mb-3">
            <div>@admin.FirstName @admin.LastName (@admin.Role)</div>
            <button @onclick="() => EditUser(admin)">Edit User</button>
            <button @onclick="() => DeleteUser(admin.Email)">Delete User</button>
        </div>
    }
}

<button @onclick="AddUser" class="btn btn-success">Add Admin</button>

@if (editUser != null)
{
    <EditForm Model="editUser" OnValidSubmit="SaveUser">
        <DataAnnotationsValidator />
        <div class="form-group">
            <label>First Name:</label>
            <InputText @bind-Value="editUser!.FirstName" class="form-control" />
        </div>
        <div class="form-group">
            <label>Last Name:</label>
            <InputText @bind-Value="editUser.LastName" class="form-control" />
        </div>
        <div class="form-group">
            <label>Email:</label>
            <InputText @bind-Value="editUser.Email" class="form-control" />
        </div>
        <div class="form-group">
            <label>Role:</label>
            <select @bind="editUser.Role" class="form-control">
                <option value="Admin">Admin</option>
                <option value="User">User</option>
            </select>
        </div>
        <button type="submit" class="btn btn-primary">Save</button>
        <button type="button" @onclick="CancelEdit" class="btn btn-secondary">Cancel</button>
    </EditForm>
}

@code {
    private List<ApplicationUser>? admins;
    private EditUserModel? editUser;

    protected override async Task OnInitializedAsync()
    {
        admins = await GetAdmins();
    }

    private async Task<List<ApplicationUser>> GetAdmins()
    {
        var result = await UserManager.Users.ToListAsync();
        return result;
    }

    private void AddUser()
    {
        editUser = new EditUserModel();
    }

    private void EditUser(ApplicationUser user)
    {
        editUser = new EditUserModel
            {
                FirstName = user.FirstName,
                LastName = user.LastName,
                Email = user.Email,
                Role = user.Role
            };
    }

    private async Task DeleteUser(string email)
    {
        var admin = await UserManager.FindByEmailAsync(email);
        if (admin != null)
        {
            await UserManager.DeleteAsync(admin);
            admins = await GetAdmins();
        }
    }

    private void CancelEdit()
    {
        editUser = null;
    }

    private async Task SaveUser()
    {
        if (editUser != null)
        {
            var user = await UserManager.FindByEmailAsync(editUser.Email);
            if (user != null)
            {
                user.FirstName = editUser.FirstName;
                user.LastName = editUser.LastName;
                user.Role = editUser.Role;
                await UserManager.UpdateAsync(user);
            }
            else
            {
                var newUser = new ApplicationUser
                    {
                        FirstName = editUser.FirstName,
                        LastName = editUser.LastName,
                        Email = editUser.Email,
                        UserName = editUser.Email,
                        Role = editUser.Role
                    };
                await UserManager.CreateAsync(newUser);
                await UserManager.AddToRoleAsync(newUser, editUser.Role);
            }
            admins = await GetAdmins();
            editUser = null;
        }
    }

    public class EditUserModel
    {
        [Required]
        public string FirstName { get; set; } = null!;

        [Required]
        public string LastName { get; set; } = null!;

        [Required]
        [EmailAddress]
        public string Email { get; set; } = null!;

        [Required]
        public string Role { get; set; } = "User"; 
    }

    
                }