@page "/course-details/{id}"
@using BlazorWebAppBackOffice.Client.Models
@using System.Text.Json
@using System.ComponentModel.DataAnnotations
@inject HttpClient Http
@rendermode InteractiveServer
<link href="/coursedetails.css" rel="stylesheet" />

@if (courseForm == null)
{
    <p class="text-center"><em>Loading Course...</em></p>
}
else
{
    @if (statusMessage != string.Empty)
    {
        <div class="alert-danger">@statusMessage
        </div>
    }




    <EditForm FormName="mutation" Model="courseForm" OnValidSubmit="SaveCourse">
        <DataAnnotationsValidator />
        <ValidationSummary />

        <div class="inside-image">
            <div class="row justify-content-start">
                <div class="form-group">
                    <InputCheckbox @bind-Value="courseForm.IsBestseller" /> <label>Best Seller</label>
                </div>
                <div class="form-group">
                    <InputCheckbox @bind-Value="courseForm.IsDigital"  /> <label>Digital</label>
                </div>
            </div>

            <div class="form-group">
                <label>Image Header URI</label>
                <InputText @bind-Value="courseForm.ImageHeaderUri"   class="form-control" />
            </div>

            <div class="inside-text">
                <div class="form-group">
                    <label>Title</label>
                    <InputText @bind-Value="courseForm.Title" class="form-control" />
                </div>
                <div class="form-group">
                    <label>Ingress</label>
                    <InputText @bind-Value="courseForm.Ingress"  class="form-control" />
                </div>
                <div class="course-info">
                    <div class="form-group">
                        <label>Star Rating</label>
                        <InputNumber @bind-Value="courseForm.StarRating"   class="form-control" />
                    </div>
                    <div class="form-group">
                        <label>Reviews</label>
                        <InputText @bind-Value="courseForm.Reviews"  class="form-control" />
                    </div>
                    <div class="form-group">
                        <label>Likes</label>
                        <InputText @bind-Value="courseForm.Likes"   class="form-control" />
                    </div>
                    <div class="form-group">
                        <label>Hours</label>
                        <InputText @bind-Value="courseForm.Hours"  class="form-control" />
                    </div>
                    <div class="form-group">
                        <label>Author</label>
                        <InputText @bind-Value="courseForm.Author"  class="form-control" />
                    </div>
                </div>
            </div>
        </div>

        <div class="container">
            <div class="form-group">
                <label>Description in HTML</label>
                <InputTextArea @bind-Value="courseForm.Description" class="form-control" />
            </div>
        </div>

        <div class="course-card">
            <h3>This Course Includes:</h3>
            <div class="form-group">
                <InputTextArea @bind-Value="courseForm.IncludesString" class="form-control" placeholder="Comma separated list of items" />
            </div>
            <div>
                <div class="form-group">
                    <label>Price</label>
                    <InputNumber @bind-Value="courseForm.Price" class="form-control"  />
                </div>
                <div class="form-group">
                    <label>Discount</label>
                    <InputNumber @bind-Value="courseForm.Discount" class="form-control" />
                </div>
            </div>
            <button type="submit" class="btn btn-primary">Save</button>
            <NavLink href="/courses" type="button" class="btn btn-secondary">Cancel</NavLink>
        </div>
    </EditForm>
}

@code {
    [Parameter]
    public string Id { get; set; }

    public CourseModel courseForm;


    public string statusMessage { get; set; } = "";

    protected override async Task OnInitializedAsync()
    {

        var query = new GraphQLQuery
        {
            Query = $"{{getCourseById(id: \"{Id}\") {{id isBestSeller title authors{{name}} prices{{price discount}} starRating reviews ingress hours likesInPercent likes imageHeaderUri isDigital content {{description includes}} }}}}"
        };
        var response = await Http.PostAsJsonAsync("http://localhost:7241/api/graphql", query);

        if (response.IsSuccessStatusCode)
        {
            var result = await response.Content.ReadFromJsonAsync<DynamicGraphQLResponse>();
            var courseElement = result?.Data.GetProperty("getCourseById");

            if (courseElement.HasValue)
            {
                courseForm = new CourseModel
                {
                    Id = courseElement.Value.GetProperty("id").GetString(),
                    IsBestseller = courseElement.Value.GetProperty("isBestSeller").GetBoolean(),
                    IsDigital = courseElement.Value.GetProperty("isDigital").GetBoolean(),
                    ImageHeaderUri = courseElement.Value.GetProperty("imageHeaderUri").GetString(),
                    Description = courseElement.Value.GetProperty("content").GetProperty("description").GetString(),
                    Title = courseElement.Value.GetProperty("title").GetString(),
                    Reviews = courseElement.Value.GetProperty("reviews").GetString(),
                    StarRating = courseElement.Value.GetProperty("starRating").GetDecimal(),
                    Ingress = courseElement.Value.GetProperty("ingress").GetString(),
                    Author = GetFirstAuthor(courseElement.Value.GetProperty("authors")),
                    Price = GetFirstPrice(courseElement.Value.GetProperty("prices")),
                    Discount = GetFirstDiscount(courseElement.Value.GetProperty("prices")),
                    Hours = courseElement.Value.GetProperty("hours").GetString(),
                    Likes = courseElement.Value.GetProperty("likes").GetString(),
                    LikesInPercent = courseElement.Value.GetProperty("likesInPercent").GetString(),
                    Includes = courseElement.Value.GetProperty("content").GetProperty("includes")
                        .EnumerateArray()
                        .Select(x => x.GetString()!)
                        .ToList()
                };
                courseForm.IncludesString = string.Join(", ", courseForm.Includes);
            }
        }
    }

    private string GetFirstAuthor(JsonElement authorsElement)
    {
        if (authorsElement.ValueKind == JsonValueKind.Array)
        {
            return authorsElement.EnumerateArray().First().GetProperty("name").GetString()!;
        }
        else if (authorsElement.ValueKind == JsonValueKind.Object)
        {
            return authorsElement.GetProperty("name").GetString()!;
        }
        return string.Empty;
    }

    private decimal GetFirstPrice(JsonElement pricesElement)
    {
        if (pricesElement.ValueKind == JsonValueKind.Array)
        {
            return pricesElement.EnumerateArray().First().GetProperty("price").GetDecimal();
        }
        else if (pricesElement.ValueKind == JsonValueKind.Object)
        {
            return pricesElement.GetProperty("price").GetDecimal();
        }
        return 0m;
    }

    private decimal GetFirstDiscount(JsonElement pricesElement)
    {
        if (pricesElement.ValueKind == JsonValueKind.Array)
        {
            return pricesElement.EnumerateArray().First().GetProperty("discount").GetDecimal();
        }
        else if (pricesElement.ValueKind == JsonValueKind.Object)
        {
            return pricesElement.GetProperty("discount").GetDecimal();
        }
        return 0m;
    }

 

    private async Task SaveCourse()
    {
        var input = new CourseUpdateRequest
            {
                Id = courseForm.Id,
                ImageHeaderUri = courseForm.ImageHeaderUri,
                IsBestSeller = courseForm.IsBestseller,
                IsDigital = courseForm.IsDigital,
                Categories = new string[] { },
                Title = courseForm.Title,
                Ingress = courseForm.Ingress,
                StarRating = courseForm.StarRating,
                Reviews = courseForm.Reviews,
                LikesInPercent = courseForm.LikesInPercent,
                Likes = courseForm.Likes,
                Hours = courseForm.Hours,
                Authors = new List<AuthorUpdateRequest>
        {
            new AuthorUpdateRequest { Name = courseForm.Author }
        },
                Prices = new PricesUpdateRequest
                {
                    Currency = "USD",
                    Price = courseForm.Price,
                    Discount = courseForm.Discount
                },
                Content = new ContentUpdateRequest
                {
                    Description = courseForm.Description,
                    Includes = courseForm.Includes?.ToArray() ?? new string[] { },
                    ProgramDetails = new List<ProgramDetailItemUpdateRequest> { }
                }
            };

        var mutation = new GraphQLQuery
            {
                Query = @"
            mutation UpdateCourse($input: CourseUpdateRequestInput!) {
                UpdateCourse(input: $input) {
                    id
                    imageUri
                    imageHeaderUri
                    isBestSeller
                    isDigital
                    categories
                    title
                    ingress
                    starRating
                    reviews
                    likesInPercent
                    likes
                    hours
                    authors {
                        name
                    }
                    prices {
                        currency
                        price
                        discount
                    }
                    content {
                        description
                        includes
                        programDetails {
                            id
                            title
                            description
                        }
                    }
                }
            }",
                Variables = new { input }
            };

        var response = await Http.PostAsJsonAsync("http://localhost:7241/api/graphql", mutation);

        if (response.IsSuccessStatusCode)
        {
            statusMessage = "Successfully updated course.";
        }
        else
        {
            statusMessage = "Failed to update course.";
        }
    }

        
public class CourseModel
    {
        [Key]
        public string? Id { get; set; }
        public string? Title { get; set; }
        public string? ImageHeaderUri { get; set; }
        public string? Author { get; set; }
        public string? Description { get; set; }
        public string? Ingress { get; set; }
        public string? Reviews { get; set; }
        public List<string>? Includes { get; set; }
        public decimal StarRating { get; set; }
        public bool IsDigital { get; set; }
        public bool IsBestseller { get; set; }
        public string? Hours { get; set; }
        public decimal Price { get; set; }
        public decimal Discount { get; set; }
        public string? LikesInPercent { get; set; }
        public string? Likes { get; set; }

        public string IncludesString { get; set; }
    }

    public class CourseUpdateRequest
    {
        public string Id { get; set; } = null!;
        public string? ImageUri { get; set; }
        public string? ImageHeaderUri { get; set; }
        public bool IsBestSeller { get; set; }
        public bool IsDigital { get; set; }
        public string[]? Categories { get; set; }
        public string? Title { get; set; }
        public string? Ingress { get; set; }
        public decimal StarRating { get; set; }
        public string? Reviews { get; set; }
        public string? LikesInPercent { get; set; }
        public string? Likes { get; set; }
        public string? Hours { get; set; }
        public virtual List<AuthorUpdateRequest>? Authors { get; set; }
        public virtual PricesUpdateRequest? Prices { get; set; }
        public virtual ContentUpdateRequest? Content { get; set; }
    }

    public class AuthorUpdateRequest
    {
        public string? Name { get; set; }
    }

    public class PricesUpdateRequest
    {
        public string? Currency { get; set; }
        public decimal Price { get; set; }
        public decimal Discount { get; set; }
    }
    public class ContentUpdateRequest
    {
        public string? Description { get; set; }
        public string[]? Includes { get; set; }
        public virtual List<ProgramDetailItemUpdateRequest>? ProgramDetails { get; set; }

    }

    public class ProgramDetailItemUpdateRequest
    {
        public int Id { get; set; }
        public string? Title { get; set; }
        public string? Description { get; set; }
    }

}